// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    title, description, author_name, price
) VALUES (
             $1, $2, $3, $4
         )
RETURNING id, title, description, author_name, price
`

type CreateBookParams struct {
	Title       string        `json:"title"`
	Description string        `json:"description"`
	AuthorName  string        `json:"author_name"`
	Price       sql.NullInt64 `json:"price"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Description,
		arg.AuthorName,
		arg.Price,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.AuthorName,
		&i.Price,
	)
	return i, err
}

const deleteBookById = `-- name: DeleteBookById :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBookById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBookById, id)
	return err
}

const getBookById = `-- name: GetBookById :one
SELECT id, title, description, author_name, price FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookById(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.AuthorName,
		&i.Price,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, description, author_name, price FROM books
ORDER BY id
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.AuthorName,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookById = `-- name: UpdateBookById :exec
UPDATE books
SET title = $2,
    description = $3,
    author_name = $4,
    price = $5
WHERE id = $1
`

type UpdateBookByIdParams struct {
	ID          int64         `json:"id"`
	Title       string        `json:"title"`
	Description string        `json:"description"`
	AuthorName  string        `json:"author_name"`
	Price       sql.NullInt64 `json:"price"`
}

func (q *Queries) UpdateBookById(ctx context.Context, arg UpdateBookByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateBookById,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.AuthorName,
		arg.Price,
	)
	return err
}
